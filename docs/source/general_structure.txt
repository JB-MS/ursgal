.. _general_structure:

General Structure
=================

Each UNode requires a **resource**, **knowledge base (kb)** and **engine** file to
be declared properly (see Schematic Overview A below).

Schematic Overview
------------------

.. figure:: figAB.png
   :align: center


Resources
---------

The **resources/** directory contains the main code of each UNode, i.e.:

    #.  executables (i.e. .exe or .jar)
    #.  standalone Python scripts

Compared to the original standalone applications, this code is completely
unchanged. Integration into Ursgal is achieved by Python wrappers around
the executables ("engines", see below) and a knowledgebase ("kb", see below).
The resources directory path depends on the platform dependencies of
the UNode:

    #.  <installation path of ursgal>\ **/resources/**\ <platform>/\ **<architecture>**
        Whereas platform is darwin (OS X), linux or win32 (Windows (and yes even if you have windows 64 bit ...))
    #.  Architecture independent engines, like Python scripts or Java packages
        can be placed in <installation path of ursgal>/resources/platform_independent/arc_independent/
    #.  Each UNode has to have its own folder following Python class name
        conventions, but all lowercase. For more details in the naming
        convention see `PEP 3131`_.

Knowledge base (kb)
--------------

Each engine has to have a knowledge base file located in
<installation path of ursgal>\ **/kb/**, ( e.g. ursgal/kb/mzml2mgf_1_0_0.py).
The kb contains such as default parameters, parameter translations and
valid input file types of the UNode. This information is stored in Python
dictionaries such as META_INFO ::

    META_INFO = {
        'engine_type' : {
            'search_engine' : True,
        },
        'output_suffix'             : '.xml',
        'input_types'               : ['.mgf'],
        'create_own_folder'         : True,
        'include_engine_in_name'    : True,
        'engine': {
            'darwin' : {
                '64bit' : {
                    'exe'            : 'tandem',
                    'url'            : '',
                    'zip_md5'        : '261dce3746481d1cc4223bccb6bf265e',
                    'additional_exe' : [],
                },
            },
            'linux' : {
                '64bit' : {
                    'exe'            : 'tandem.exe',
                    'url'            : '',
                    'zip_md5'        : 'af307fea9f2b954f1a9a3652c14a5742',
                    'additional_exe' : [],
                },
            },
            'win32' : {
                '64bit' : {
                    'exe'            : 'tandem.exe',
                    'url'            : '',
                    'zip_md5'        : '16c3b766e02690386f280515175cdc90',
                    'additional_exe' : [],
                },
            },
        },
        'citation'                  : 'Craig R, Beavis RC. (2004) TANDEM: '\
            matching proteins with tandem mass spectra.',
    }

The META_INFO dictionary declares:

    #. What kind of type the engine is (engine_type).
    #. What is the executable name of the engine for different platforms
       ('engine': 'darwin', 'win32', 'linux')
    #. Citation of the third party tool that was incorporated into Ursgal.
       This information is printed at runtime.

.. _PEP 3131:
    https://www.python.org/dev/peps/pep-3131/

Engine Python class
-------------------

The engine inherits from the uNode, which during initialization injects
the knowledge base data into the class. Thus, those dictionaries (e.g. self.META_INFO)
are available as attribute of each engine.

The default structure of the engine is::

    class mzml2mgf_1_0_0(ursgal.UNode):
        def __init__(self, *args, **kwargs):
                super(mzml2mgf_1_0_0, self).__init__(*args, **kwargs)

        def preflight(self):
            # code that should be run before the UNode is executed
            # i.e. writing a config file
            return

        def postflight(self):
            # code that should be run after the UNode is executed
            # i.e. formatting the output file
            return


The special methods `preflight()` and `postflight()` are automatically called
be Ursgal's UController when a UNode is run.